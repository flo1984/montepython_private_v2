#-----CLASS v2.7.1 (branch: master, hash: 08bc271bd59780c3e930cc6784271b67d03130af)-----

#------Experiments to test (separated with commas)-----

data.experiments=['bao_fs_boss_dr12','bao_smallz_2014','Pantheon','bbn']


#------ Settings for the over-sampling.
# The first element will always be set to 1, for it is the sampling of the
# cosmological parameters. The other numbers describe the over sampling of the
# nuisance parameter space. This array must have the same dimension as the
# number of blocks in your run (so, 1 for cosmological parameters, and then 1
# for each experiment with varying nuisance parameters).
# Note that when using Planck likelihoods, you definitely want to use [1, 4],
# to oversample as much as possible the 14 nuisance parameters.
# Remember to order manually the experiments from slowest to fastest (putting
# Planck as the first set of experiments should be a safe bet, except if you
# also have LSS experiments).
# If you have experiments without nuisance, you do not need to specify an
# additional entry in the over_sampling list (notice for instance that, out of
# the three Planck likelihoods used, only Planck_highl requires nuisance
# parameters, therefore over_sampling has a length of two (cosmology, plus one
# set of nuisance).
data.over_sampling=[1,2]

#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to None
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'. You should put the derived
# parameters at the end, and in case you are using the `-j fast` Cholesky
# decomposition, you should order your nuisance parameters from slowest to
# fastest.

# Cosmological parameters list

data.parameters['omega_b']      = [ 2.265,   None, None,  0.028, 0.01, 'cosmo']
data.parameters['omega_cdm']    = [0.1266,   None, None, 0.0027,    1, 'cosmo']
data.parameters['h']            = [.715,   None,None,   .01,    1, 'cosmo']
#data.parameters['ln10^{10}A_s'] = [ 3.144,   None, None, 0.0029,    1, 'cosmo']
#data.parameters['n_s']          = [0.99,   None, None, 0.0074,    1, 'cosmo']
data.parameters['frac_EDE']     = [0.065,   0.0000001, 0.2,  0.002,    1, 'cosmo']
data.parameters['log10mass']    = [2.7,   .7, 4.5,  0.01,    1, 'cosmo']
#data.parameters['tau_reio']     = [0.0925,   0.04, None,  0.013,    1, 'cosmo']

# Nuisance parameter list, same call, except the name does not have to be a class name



data.parameters['M']          = [-19.1,   None, None,  0.004,  1,'nuisance']

# Derived parameters

data.parameters['YHe']             = [1, None, None, 0,     1,   'derived']
#data.parameters['H0']              = [0, None, None, 0,     1,   'derived']
#data.parameters['A_s']             = [0, None, None, 0,  1e-9,   'derived']
data.parameters['sigma8']          = [0, None, None, 0,     1,   'derived']
data.parameters['rs_d']          = [0, None, None, 0,     1,   'derived']
data.parameters['z_decay']          = [0, None, None, 0,     1,   'derived']

# Other cosmo parameters (fixed parameters, precision parameters, etc.)

data.cosmo_arguments['sBBN file'] = data.path['cosmo']+'/bbn/sBBN.dat'
data.cosmo_arguments['k_pivot'] = 0.05


# The base model features two massless
# and one massive neutrino with m=0.06eV.
# The settings below ensures that Neff=3.046
# and m/omega = 93.14 eV

data.cosmo_arguments['N_ur'] = 2.0328
data.cosmo_arguments['N_ncdm'] = 1
data.cosmo_arguments['m_ncdm'] = 0.06
data.cosmo_arguments['T_ncdm'] = 0.71611
data.cosmo_arguments['n_s']    = 0.9649
data.cosmo_arguments['tau_reio'] = 0.0544
data.cosmo_arguments['ln10^{10}A_s'] = 3.044



# These two are required to get sigma8 as a derived parameter
# (class must compute the P(k) until sufficient k)
data.cosmo_arguments['output'] = 'mPk'
data.cosmo_arguments['P_k_max_h/Mpc'] = 1.

data.cosmo_arguments['WKB_trigger_H_over_m']=0.01
data.cosmo_arguments['Bubble_trigger_H_over_m']=0.2
data.cosmo_arguments['EDE2_clock_ini'] = 0.00001
#data.cosmo_arguments['background_verbose'] = 4
#data.cosmo_arguments['perturbations_verbose'] = 1
data.cosmo_arguments['Junction_tag'] = 1
data.cosmo_arguments['DMa_tag'] = 0
#data.cosmo_arguments['back_integration_stepsize'] = 2.e-3
#makes sure that all modes start before the transition of EDE, i.e. before z=30k.
data.cosmo_arguments['start_large_k_at_tau_h_over_tau_k'] = 0.000001
data.cosmo_arguments['start_small_k_at_tau_c_over_tau_h'] = 0.000001


#------ Mcmc parameters ----

data.N=10
data.write_step=5



#-----Likelihood-bao_fs_boss_dr12-----
bao_fs_boss_dr12.data_file = 'COMBINEDDR12_final_consensus_dM_Hz/final_consensus_results_dM_Hz_fsig.txt'
bao_fs_boss_dr12.rd_fid_in_Mpc = 147.78
bao_fs_boss_dr12.cov_file = 'COMBINEDDR12_final_consensus_dM_Hz/final_consensus_covtot_dM_Hz_fsig.txt'
bao_fs_boss_dr12.data_directory = '/Users/niedermann/Documents/CMB/montepython_private_v2/data'
bao_fs_boss_dr12.rs_rescale = 1.0


#-----Likelihood-bao_smallz_2014-----
bao_smallz_2014.exclude = []
bao_smallz_2014.file = 'bao_smallz_2014.txt'
bao_smallz_2014.data_directory = '/Users/niedermann/Documents/CMB/montepython_private_v2/data'


#-----Likelihood-Pantheon-----
Pantheon.use_nuisance = ['M']
Pantheon.conflicting_experiments = ['JLA_simple', 'JLA']
Pantheon.data_directory = '/Users/niedermann/Documents/CMB/montepython_private_v2/data/Pantheon'
Pantheon.settings = 'pantheon.dataset'


#-----Likelihood-bbn-----
bbn.omega_b = 0.02268
bbn.sigma = 0.00036


#-----------Cosmological-arguments---------
data.cosmo_arguments.update({'Junction_tag': 1, 'sBBN file': '/Users/niedermann/Documents/CMB/class_private/bbn/sBBN.dat', 'EDE2_clock_ini': 1e-05, 'output': 'mPk', 'P_k_max_h/Mpc': '1.', 'ln10^{10}A_s': 3.044, 'N_ur': 2.0328, 'start_small_k_at_tau_c_over_tau_h': 1e-06, 'WKB_trigger_H_over_m': 0.01, 'm_ncdm': 0.06, 'n_s': 0.9649, 'k_pivot': 0.05, 'start_large_k_at_tau_h_over_tau_k': 1e-06, 'Bubble_trigger_H_over_m': 0.2, 'tau_reio': 0.0544, 'N_ncdm': 1, 'T_ncdm': 0.71611, 'z_max_pk': '1.', 'DMa_tag': 0})


#--------Default-Configuration------
data.path['cosmo']	= '/Users/niedermann/Documents/CMB/class_private'
data.path['root']	= '/Users/niedermann/Documents/CMB/montepython_private_v2'
data.path['data']	= '/Users/niedermann/Documents/CMB/montepython_private_v2/data'
data.path['clik']	= '/Users/niedermann/Documents/CMB/data/R3/code/plc_3.0/plc-3.01'
data.path['MontePython']	= '/Users/niedermann/Documents/CMB/montepython_private_v2/montepython'
