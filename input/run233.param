#------Experiments to test (separated with commas)-----
data.experiments=['Planck_highl_TTTEEE_lite','Planck_lowl_TT','Planck_lowl_EE','Planck_lensing','bao_smallz_2014','bao_boss_dr12']

#------ Settings for the over-sampling.
# The first element will always be set to 1, for it is the sampling of the
# cosmological parameters. The other numbers describe the over sampling of the
# nuisance parameter space. This array must have the same dimension as the
# number of blocks in your run (so, 1 for cosmological parameters, and then 1
# for each experiment with varying nuisance parameters).
# Note that when using Planck likelihoods, you definitely want to use [1, 4],
# to oversample as much as possible the 14 nuisance parameters.
# Remember to order manually the experiments from slowest to fastest (putting
# Planck as the first set of experiments should be a safe bet, except if you
# also have LSS experiments).
# If you have experiments without nuisance, you do not need to specify an
# additional entry in the over_sampling list (notice for instance that, out of
# the three Planck likelihoods used, only Planck_highl requires nuisance
# parameters, therefore over_sampling has a length of two (cosmology, plus one
# set of nuisance).
data.over_sampling=[1,  10]

#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to None
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'. You should put the derived
# parameters at the end, and in case you are using the `-j fast` Cholesky
# decomposition, you should order your nuisance parameters from slowest to
# fastest.

# Cosmological parameters list

data.parameters['omega_b']      = [ 2.28,   None, None,  0.028, 0.01, 'cosmo']
data.parameters['omega_cdm']    = [0.133,   None, None, 0.0027,    1, 'cosmo']
data.parameters['h']            = [.715,   None, None,   .006,    1, 'cosmo']
data.parameters['ln10^{10}A_s'] = [ 3.077,   None, None, 0.0029,    1, 'cosmo']
data.parameters['n_s']          = [0.99,   None, None, 0.0074,    1, 'cosmo']
data.parameters['tau_reio']     = [0.057,   0.04, None,  0.013,    1, 'cosmo']
data.parameters['w0_fld']    = 	  [-1,   -1.9, -.5,  0.05,    1, 'cosmo']




# Nuisance parameter list, same call, except the name does not have to be a class name
data.parameters['A_planck']          = [ 1.00061,   0.9,   1.1,     0.0025,     1, 'nuisance']


# Derived parameters

data.parameters['YHe']             = [1, None, None, 0,     1,   'derived']
#data.parameters['H0']              = [0, None, None, 0,     1,   'derived']
#data.parameters['A_s']             = [0, None, None, 0,  1e-9,   'derived']
data.parameters['sigma8']          = [0, None, None, 0,     1,   'derived']
data.parameters['rs_d']          = [0, None, None, 0,     1,   'derived']



# Other cosmo parameters (fixed parameters, precision parameters, etc.)

data.cosmo_arguments['sBBN file'] = data.path['cosmo']+'/bbn/sBBN_2017.dat'
data.cosmo_arguments['k_pivot'] = 0.05


# The base model features two massless
# and one massive neutrino with m=0.06eV.
# The settings below ensures that Neff=3.046
# and m/omega = 93.14 eV

data.cosmo_arguments['N_ur'] = 2.0328
data.cosmo_arguments['N_ncdm'] = 1
data.cosmo_arguments['m_ncdm'] = 0.06
data.cosmo_arguments['T_ncdm'] = 0.71611



# These two are required to get sigma8 as a derived parameter
# (class must compute the P(k) until sufficient k)
data.cosmo_arguments['output'] = 'mPk'
data.cosmo_arguments['P_k_max_h/Mpc'] = 1.


data.cosmo_arguments['background_verbose'] = 0
data.cosmo_arguments['perturbations_verbose'] = 0
data.cosmo_arguments['back_integration_stepsize'] = 5.e-3
data.cosmo_arguments['Omega_Lambda'] = 0.0
data.cosmo_arguments['wa_fld'] = 0.0
data.cosmo_arguments['cs2_fld'] = 1.0
data.cosmo_arguments['use_ppf'] = 'yes'
data.cosmo_arguments['c_gamma_over_c_fld'] = 0.4


#makes sure that all modes start before the transition of EDE, i.e. before z=30k.
data.cosmo_arguments['start_large_k_at_tau_h_over_tau_k'] = 0.000001
data.cosmo_arguments['start_small_k_at_tau_c_over_tau_h'] = 0.000001


#------ Mcmc parameters ----

data.N=10
data.write_step=5

