#-----CLASS v2.7.1 (branch: master, hash: 08bc271bd59780c3e930cc6784271b67d03130af)-----

#------Experiments to test (separated with commas)-----

data.experiments=['Planck_highl_TTTEEE','Planck_lowl_TT','Planck_lowl_EE','Planck_lensing','bao_fs_boss_dr12','bao_smallz_2014','H0_local','Pantheon']


#------ Settings for the over-sampling.
# The first element will always be set to 1, for it is the sampling of the
# cosmological parameters. The other numbers describe the over sampling of the
# nuisance parameter space. This array must have the same dimension as the
# number of blocks in your run (so, 1 for cosmological parameters, and then 1
# for each experiment with varying nuisance parameters).
# Note that when using Planck likelihoods, you definitely want to use [1, 4],
# to oversample as much as possible the 14 nuisance parameters.
# Remember to order manually the experiments from slowest to fastest (putting
# Planck as the first set of experiments should be a safe bet, except if you
# also have LSS experiments).
# If you have experiments without nuisance, you do not need to specify an
# additional entry in the over_sampling list (notice for instance that, out of
# the three Planck likelihoods used, only Planck_highl requires nuisance
# parameters, therefore over_sampling has a length of two (cosmology, plus one
# set of nuisance).
data.over_sampling=[1, 5,2]

#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to None
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'. You should put the derived
# parameters at the end, and in case you are using the `-j fast` Cholesky
# decomposition, you should order your nuisance parameters from slowest to
# fastest.

# Cosmological parameters list

data.parameters['omega_b']      = [ 2.265,   None, None,  0.028, 0.01, 'cosmo']
data.parameters['omega_cdm']    = [0.1266,   None, None, 0.0027,    1, 'cosmo']
data.parameters['h']            = [.715,   None, None,   .002,    1, 'cosmo']
data.parameters['ln10^{10}A_s'] = [3.144,   None, None, 0.0029,    1, 'cosmo']
data.parameters['n_s']          = [0.99,   None, None, 0.0074,    1, 'cosmo']
data.parameters['frac_EDE']     = [0.065,   0.0000001, 0.2,  0.002,    1, 'cosmo']
data.parameters['log10mass']    = [3.7,   3.3, 3.9,  0.01,    1, 'cosmo']
data.parameters['tau_reio']     = [0.0925,   0.04, None,  0.013,    1, 'cosmo']

# Nuisance parameter list, same call, except the name does not have to be a class name
data.parameters['A_cib_217']         = [    47.2,     0,   200,     6.2593,     1, 'nuisance']
data.parameters['cib_index']         = [    -1.3,  -1.3,  -1.3,          0,     1, 'nuisance']
data.parameters['xi_sz_cib']         = [    0.42,     0,     1,       0.33,     1, 'nuisance']
data.parameters['A_sz']              = [    7.23,     0,    10,     1.4689,     1, 'nuisance']
data.parameters['ps_A_100_100']      = [   251.0,     0,   400,     29.438,     1, 'nuisance']
data.parameters['ps_A_143_143']      = [    47.4,     0,   400,     9.9484,     1, 'nuisance']
data.parameters['ps_A_143_217']      = [    47.3,     0,   400,     11.356,     1, 'nuisance']
data.parameters['ps_A_217_217']      = [   119.8,     0,   400,     10.256,     1, 'nuisance']
data.parameters['ksz_norm']          = [    0.01,     0,    10,     2.7468,     1, 'nuisance']
data.parameters['gal545_A_100']      = [    8.86,     0,    50,     1.8928,     1, 'nuisance']
data.parameters['gal545_A_143']      = [   11.10,     0,    50,     1.8663,     1, 'nuisance']
data.parameters['gal545_A_143_217']  = [    19.8,     0,   100,     3.8796,     1, 'nuisance']
data.parameters['gal545_A_217']      = [    95.1,     0,   400,     6.9759,     1, 'nuisance']
data.parameters['galf_EE_A_100']     = [   0.055, 0.055, 0.055,          0,     1, 'nuisance']
data.parameters['galf_EE_A_100_143'] = [   0.040, 0.040, 0.040,          0,     1, 'nuisance']
data.parameters['galf_EE_A_100_217'] = [   0.094, 0.094, 0.094,          0,     1, 'nuisance']
data.parameters['galf_EE_A_143']     = [   0.086, 0.086, 0.086,          0,     1, 'nuisance']
data.parameters['galf_EE_A_143_217'] = [    0.21,  0.21,  0.21,          0,     1, 'nuisance']
data.parameters['galf_EE_A_217']     = [    0.70,  0.70,  0.70,          0,     1, 'nuisance']
data.parameters['galf_EE_index']     = [    -2.4,  -2.4,  -2.4,          0,     1, 'nuisance']
data.parameters['galf_TE_A_100']     = [   0.114,     0,    10,   0.038762,     1, 'nuisance']
data.parameters['galf_TE_A_100_143'] = [   0.134,     0,    10,   0.030096,     1, 'nuisance']
data.parameters['galf_TE_A_100_217'] = [   0.482,     0,    10,   0.086185,     1, 'nuisance']
data.parameters['galf_TE_A_143']     = [   0.224,     0,    10,   0.055126,     1, 'nuisance']
data.parameters['galf_TE_A_143_217'] = [   0.664,     0,    10,   0.082349,     1, 'nuisance']
data.parameters['galf_TE_A_217']     = [    2.08,     0,    10,    0.27175,     1, 'nuisance']
data.parameters['galf_TE_index']     = [    -2.4,  -2.4,  -2.4,          0,     1, 'nuisance']
data.parameters['calib_100T']        = [  999.69,     0,  3000,    0.61251, 0.001, 'nuisance']
data.parameters['calib_217T']        = [  998.16,     0,  3000,    0.63584, 0.001, 'nuisance']
data.parameters['calib_100P']        = [   1.021, 1.021, 1.021,          0,     1, 'nuisance']
data.parameters['calib_143P']        = [   0.966, 0.966, 0.966,          0,     1, 'nuisance']
data.parameters['calib_217P']        = [   1.040, 1.040, 1.040,          0,     1, 'nuisance']
data.parameters['A_cnoise_e2e_100_100_EE'] = [ 1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_cnoise_e2e_143_143_EE'] = [ 1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_cnoise_e2e_217_217_EE'] = [ 1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_100_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_143_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_217_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_217_217_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_100_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_143_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_217_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_143_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_217_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_217_217_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_planck']          = [ 1.00061,   0.9,   1.1,     0.0025,     1, 'nuisance']
data.parameters['A_pol']             = [       1,     1,     1,          0,     1, 'nuisance']


data.parameters['M']          = [-19.1,   None, None,  0.004,  1,'nuisance']

# Derived parameters

#data.parameters['YHe']             = [1, None, None, 0,     1,   'derived']
#data.parameters['H0']              = [0, None, None, 0,     1,   'derived']
#data.parameters['A_s']             = [0, None, None, 0,  1e-9,   'derived']
data.parameters['sigma8']          = [0, None, None, 0,     1,   'derived']
data.parameters['rs_d']          = [0, None, None, 0,     1,   'derived']
data.parameters['z_decay']          = [0, None, None, 0,     1,   'derived']

# Other cosmo parameters (fixed parameters, precision parameters, etc.)

data.cosmo_arguments['sBBN file'] = data.path['cosmo']+'/bbn/sBBN.dat'
data.cosmo_arguments['k_pivot'] = 0.05


# The base model features two massless
# and one massive neutrino with m=0.06eV.
# The settings below ensures that Neff=3.046
# and m/omega = 93.14 eV

data.cosmo_arguments['N_ur'] = 2.0328
data.cosmo_arguments['N_ncdm'] = 1
data.cosmo_arguments['m_ncdm'] = 0.06
data.cosmo_arguments['T_ncdm'] = 0.71611
#data.cosmo_arguments['log10mass'] = 3.1


# These two are required to get sigma8 as a derived parameter
# (class must compute the P(k) until sufficient k)
data.cosmo_arguments['output'] = 'mPk'
data.cosmo_arguments['P_k_max_h/Mpc'] = 1.

data.cosmo_arguments['WKB_trigger_H_over_m']=0.01
data.cosmo_arguments['Bubble_trigger_H_over_m']=0.2
data.cosmo_arguments['EDE2_clock_ini'] = 0.00001
#data.cosmo_arguments['background_verbose'] = 4
#data.cosmo_arguments['perturbations_verbose'] = 1
data.cosmo_arguments['Junction_tag'] = 1
data.cosmo_arguments['DMa_tag'] = 0
#data.cosmo_arguments['back_integration_stepsize'] = 2.e-3
#makes sure that all modes start before the transition of EDE, i.e. before z=30k.
data.cosmo_arguments['start_large_k_at_tau_h_over_tau_k'] = 0.000001
data.cosmo_arguments['start_small_k_at_tau_c_over_tau_h'] = 0.000001


#------ Mcmc parameters ----

data.N=10
data.write_step=5



#-----Likelihood-Planck_highl_TTTEEE-----
Planck_highl_TTTEEE.galf_TE_A_100_143_prior_variance = 0.036
Planck_highl_TTTEEE.calib_100T_prior_variance = 0.0007
Planck_highl_TTTEEE.gal545_A_143_prior_center = 10.6
Planck_highl_TTTEEE.gal545_A_100_prior_variance = 2
Planck_highl_TTTEEE.galf_TE_A_217_prior_center = 1.938
Planck_highl_TTTEEE.path_clik = '/Users/niedermann/Documents/CMB/data/R3/code/plc_3.0/plc-3.01/../../../baseline/plc_3.0/hi_l/plik/plik_rd12_HM_v22b_TTTEEE.clik'
Planck_highl_TTTEEE.gal545_A_143_217_prior_variance = 8.5
Planck_highl_TTTEEE.galf_TE_A_217_prior_variance = 0.54
Planck_highl_TTTEEE.galf_TE_A_100_prior_variance = 0.042
Planck_highl_TTTEEE.gal545_A_217_prior_center = 91.9
Planck_highl_TTTEEE.galf_TE_A_100_prior_center = 0.13
Planck_highl_TTTEEE.galf_TE_A_143_prior_variance = 0.072
Planck_highl_TTTEEE.gal545_A_217_prior_variance = 20
Planck_highl_TTTEEE.calib_217T_prior_variance = 0.00065
Planck_highl_TTTEEE.galf_TE_A_143_217_prior_variance = 0.09
Planck_highl_TTTEEE.galf_TE_A_100_143_prior_center = 0.13
Planck_highl_TTTEEE.A_planck_prior_center = 1
Planck_highl_TTTEEE.galf_TE_A_143_prior_center = 0.207
Planck_highl_TTTEEE.gal545_A_143_217_prior_center = 23.5
Planck_highl_TTTEEE.galf_TE_A_100_217_prior_center = 0.46
Planck_highl_TTTEEE.A_planck_prior_variance = 0.0025
Planck_highl_TTTEEE.galf_TE_A_100_217_prior_variance = 0.09
Planck_highl_TTTEEE.calib_217T_prior_center = 0.99805
Planck_highl_TTTEEE.galf_TE_A_143_217_prior_center = 0.69
Planck_highl_TTTEEE.calib_100T_prior_center = 1.0002
Planck_highl_TTTEEE.gal545_A_143_prior_variance = 2
Planck_highl_TTTEEE.gal545_A_100_prior_center = 8.6


#-----Likelihood-Planck_lowl_TT-----
Planck_lowl_TT.path_clik = '/Users/niedermann/Documents/CMB/data/R3/code/plc_3.0/plc-3.01/../../../baseline/plc_3.0/low_l/commander/commander_dx12_v3_2_29.clik'


#-----Likelihood-Planck_lowl_EE-----
Planck_lowl_EE.path_clik = '/Users/niedermann/Documents/CMB/data/R3/code/plc_3.0/plc-3.01/../../../baseline/plc_3.0/low_l/simall/simall_100x143_offlike5_EE_Aplanck_B.clik'


#-----Likelihood-Planck_lensing-----
Planck_lensing.path_clik = '/Users/niedermann/Documents/CMB/data/R3/code/plc_3.0/plc-3.01/../../../baseline/plc_3.0/lensing/smicadx12_Dec5_ftl_mv2_ndclpp_p_teb_consext8.clik_lensing'


#-----Likelihood-bao_fs_boss_dr12-----
bao_fs_boss_dr12.data_file = 'COMBINEDDR12_final_consensus_dM_Hz/final_consensus_results_dM_Hz_fsig.txt'
bao_fs_boss_dr12.rd_fid_in_Mpc = 147.78
bao_fs_boss_dr12.cov_file = 'COMBINEDDR12_final_consensus_dM_Hz/final_consensus_covtot_dM_Hz_fsig.txt'
bao_fs_boss_dr12.data_directory = '/Users/niedermann/Documents/CMB/montepython_private_v2/data'
bao_fs_boss_dr12.rs_rescale = 1.0


#-----Likelihood-bao_smallz_2014-----
bao_smallz_2014.exclude = []
bao_smallz_2014.file = 'bao_smallz_2014.txt'
bao_smallz_2014.data_directory = '/Users/niedermann/Documents/CMB/montepython_private_v2/data'


#-----Likelihood-H0_local-----
H0_local.H0 = 74.03
H0_local.error = 1.42


#-----Likelihood-Pantheon-----
Pantheon.use_nuisance = ['M']
Pantheon.conflicting_experiments = ['JLA_simple', 'JLA']
Pantheon.data_directory = '/Users/niedermann/Documents/CMB/montepython_private_v2/data/Pantheon'
Pantheon.settings = 'pantheon.dataset'


#-----------Cosmological-arguments---------
data.cosmo_arguments.update({'Junction_tag': 1, 'sBBN file': '/Users/niedermann/Documents/CMB/class_private/bbn/sBBN.dat', 'Bubble_trigger_H_over_m': 0.2, 'P_k_max_h/Mpc': '1.', 'output': 'mPk tCl lCl pCl ', 'N_ur': 2.0328, 'start_small_k_at_tau_c_over_tau_h': 1e-06, 'WKB_trigger_H_over_m': 0.01, 'm_ncdm': 0.06, 'l_max_scalars': 2508, 'k_pivot': 0.05, 'start_large_k_at_tau_h_over_tau_k': 1e-06, 'EDE2_clock_ini': 1e-05, 'N_ncdm': 1, 'lensing': ' yes ', 'T_ncdm': 0.71611, 'z_max_pk': '1.', 'DMa_tag': 0})


#--------Default-Configuration------
data.path['cosmo']	= '/Users/niedermann/Documents/CMB/class_private'
data.path['root']	= '/Users/niedermann/Documents/CMB/montepython_private_v2'
data.path['data']	= '/Users/niedermann/Documents/CMB/montepython_private_v2/data'
data.path['clik']	= '/Users/niedermann/Documents/CMB/data/R3/code/plc_3.0/plc-3.01'
data.path['MontePython']	= '/Users/niedermann/Documents/CMB/montepython_private_v2/montepython'
